# -*- coding: utf-8 -*-
"""project131 and 132 and project133and project134 and project135.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/13ODoP8IgJVzS1ozzm1IlD30uJe2rkz5W
"""
import pandas as pd
import numpy as np
import plotly.express as px
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns
#updating the mass data
def preprocess(df):
  df["Mass"]=df["Mass"].astype('str').apply(lambda x: x.replace('<',""))

def clean_currency(x):
    if isinstance(x, str):
        return(x.replace(',', ''))
    return(x)

# cleaning the data
def clean_data(df):
  del df["Unnamed: 0"]
  df['Mass'].replace('', np.nan, inplace=True)
  df.dropna(subset=['Mass'], inplace=True)
  df['Radius'].replace('',np.nan,inplace=True)
  df.dropna(subset=['Radius'], inplace=True)
  df["Distance"].replace('0640[1]',640.5,inplace=True)
  df['Distance'] = df['Distance'].apply(clean_currency).astype('float')
# converting solar mass into kilograms and radius into meters
def convert_to_si(radius,mass):
  for i in range(0,len(radius)-1):
      radius[i]=radius[i]*int(6.96)
      mass[i]=mass[i]*int(1.99)

# calculating gravity
def calcGravity(radius,mass):
  gravity=[]
  G=float(6.674e-11)
  for x in range(0,len(mass)):
      r=float(radius[x])
      if r>0:
        g=(float(mass[x])*G)/(r*r)
      else:g=0
      if g<=0:g=0
      gravity.append(g)
  return gravity
  
# function to process dataset
def process(df):
  clean_data(df)
  preprocess(df)
  radius=df["Radius"].to_list()
  mass=df["Mass"].to_list()  
  convert_to_si(radius,mass)
  gravity=calcGravity(radius,mass)
  df["Gravity"]=gravity

def filtering_distance(df):
  temp_distance_list=[]
  distance_list=df["Distance"].to_list()  
  for star_data in distance_list:
    if star_data<100:
      temp_distance_list.append(star_data)
  print(temp_distance_list)

  temp_gravity_list=[]
  gravity_list=df["Gravity"].to_list()  
  for star_data2 in gravity_list:    
    if star_data2>-1 and 0<star_data2:
      temp_gravity_list.append(star_data2)
    else:print(star_data2)
  print(temp_gravity_list)

  df3 = pd.DataFrame(list(zip(temp_distance_list, temp_gravity_list)),columns =['Distance', 'Gravity'])
  df3.to_csv()
  
def ploting(df):
  a=df["Mass"].to_list()
  c=df["Gravity"].to_list()
  d=df["Star_name"].to_list()
  e=df["Radius"].to_list()
  fig=px.scatter(x=d,y=c,color=a)
  fig2=px.scatter(x=a,y=e)
  fig.show()
  fig2.show()

def clustering(df):
  X=[]
  mass=df["Mass"].to_list()
  radius=df["Radius"].to_list()
  for index,star_mass in enumerate(mass):
    temp_list=[radius[index],star_mass]
    X.append(temp_list)
  wcss=[]
  print(X)
  for i in range(1,11):
    kmeans=KMeans(n_clusters=i,init='k-means++',random_state=42)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_) 

  plt.figure(figsize=(10,5))
  sns.lineplot(range(1,11),wcss,marker='o',color='green')
  plt.title("clustering")
  plt.xlabel("no. of clusters")
  plt.ylabel("wcss")
  plt.show()

  kmeans = KMeans(n_clusters = 4, init = 'k-means++', random_state = 42)
  y_kmeans = kmeans.fit_predict(X)

  cluster_1_x = []
  cluster_1_y = []
  cluster_2_x = []
  cluster_2_y = []
  cluster_3_x = []
  cluster_3_y = []
  cluster_4_x = []
  cluster_4_y = []

  for index, data in enumerate(X):
    if y_kmeans[index] == 0:
      cluster_1_x.append(data[0])
      cluster_1_y.append(data[1])
    elif y_kmeans[index] == 1:
      cluster_2_x.append(data[0])
      cluster_2_y.append(data[1])
    elif y_kmeans[index] == 2:
      cluster_3_x.append(data[0])
      cluster_3_y.append(data[1])
    elif y_kmeans[index] == 3:
      cluster_4_x.append(data[0])
      cluster_4_y.append(data[1])

  #Chart with Scatter Plot
  plt.figure(figsize=(10,10))
  sns.scatterplot(cluster_1_x, cluster_1_y, color = 'yellow', label = 'Cluster 1')
  sns.scatterplot(cluster_2_x, cluster_2_y, color = 'blue', label = 'Cluster 2')
  sns.scatterplot(cluster_3_x, cluster_3_y, color = 'green', label = 'Cluster 3')
  sns.scatterplot(cluster_4_x, cluster_4_y, color = 'red', label = 'Cluster 4')
  sns.scatterplot(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], color = 'black', label = 'Centroids',s=100,marker=',')
  plt.title('Clusters of Planets')
  plt.xlabel('Planet Radius')
  plt.ylabel('Planet Mass')
  plt.legend()
  plt.gca()
  plt.show()

# main 
df1=pd.read_csv("bright_stars8.csv")
df2=pd.read_csv("dwarf_stars.csv")

process(df1)
print("\n\n")
process(df2)

ploting(df2)
ploting(df1)

# PROJECT133
clustering(df1)
clustering(df2)

import csv
rows = []
with open("bright_stars8.csv", "r") as f:
  csvreader = csv.reader(f)
  for row in csvreader: 
    rows.append(row)
headers = rows[0]
star_data_rows = rows[1:]
print(headers)
print(star_data_rows[1])

rows2 = []
with open("dwarf_stars.csv", "r") as f:
  csvreader = csv.reader(f)
  for row in csvreader: 
    rows2.append(row)
headers2 = rows2[0]
star_data_rows2 = rows2[1:]
print(headers2)
print(star_data_rows2[1])

star_masses = []
star_radiuses = []
star_names = []
for star_data in star_data_rows:
  star_masses.append(star_data[3])
  star_radiuses.append(star_data[4])
  star_names.append(star_data[1])

star_masses2 = []
star_radiuses2 = []
star_names2 = []
for star_data in star_data_rows2:
  if star_data[3].lower()=='' and star_data[4].lower()=='':
    star_data_rows2.remove(star_data)
  if star_data[3].lower()=='' or star_data[4].lower()=='':
    star_data[3].replace('','0')
    star_data[4].replace('','0')
  star_masses2.append(star_data[3])
  star_radiuses2.append(star_data[4])
  star_names2.append(star_data[1])
print(star_data_rows2)
print(len(star_data_rows2))

star_gravity = []
for index, name in enumerate(star_names):
  if float(star_masses[index])>0.0 and float(star_radiuses[index])>0.0:
    gravity = (float(star_masses[index])*5.972e+24) / (float(star_radiuses[index])*float(star_radiuses[index])*6371000*6371000) * 6.674e-11
  else:gravity=0
  star_gravity.append(gravity)
print(star_gravity)

star_gravity2 = []
for index, name in enumerate(star_names2):  
  
  if float(star_masses2[index])>0.0 and float(star_radiuses2[index])>0.0:
    gravity2 = (float(star_masses2[index])*5.972e+24) / (float(star_radiuses2[index])*float(star_radiuses2[index])*6371000*6371000) * 6.674e-11
  else:gravity2=0
  star_gravity2.append(gravity2)
print(star_gravity2)

for i in star_data_rows:
  float(i[2])  
  if float(i[2])>100:star_data_rows.remove(i)
print(star_data_rows)
for i in star_data_rows2:
  float(i[2])  
  if float(i[2])>100:star_data_rows2.remove(i)
print(star_data_rows2)

for a in star_gravity:
  if a<2:star_gravity.remove(a)
print(star_gravity)

star_dict=[]
for index,star_data in enumerate(star_data_rows):
  if float(star_data[2])<100:   
    if star_gravity[index]>2:      
      my_dict={
          "name":star_data[1],
          "Distance_from_earth":float(star_data[2]),
          "star_mass":float(star_data[3]),
          "star_radius":float(star_data[4]),      
          "gravity":star_gravity[index]    
      }
      star_dict.append(my_dict)
df1=pd.DataFrame(data=star_dict)
df1.to_csv("final.csv")

star_dict2=[]
for index,star_data in enumerate(star_data_rows2):
  if float(star_data[2])<100:
    if star_gravity2[index]<300 :
      my_dict={
          "name":star_data[1],
          "Distance_from_earth":float(star_data[2]),
          "star_mass":float(star_data[3]),
          "star_radius":float(star_data[4]),      
          "gravity":star_gravity2[index]    
      }
      star_dict2.append(my_dict)

df=pd.DataFrame(data=star_dict2)
df.to_csv("final2.csv")

df2=pd.read_csv("final.csv")
starNameList=df2["name"].to_list()
massList=df2["star_mass"].to_list()
fig1_1=px.scatter(df2,x=starNameList,y=massList)
fig1_1.show()

df3=pd.read_csv("final2.csv")
starNameList2=df3["name"].to_list()
massList2=df3["star_mass"].to_list()
fig1_2=px.scatter(df3,x=starNameList2,y=massList2)
fig1_2.show()

radiusList=df2["star_radius"].to_list()
fig2_1=px.scatter(df2,x=starNameList,y=radiusList)
fig2_1.show()

radiusList2=df3["star_radius"].to_list()
fig2_2=px.scatter(df3,x=starNameList2,y=radiusList2)
fig2_2.show()

gravityList=df2["gravity"].to_list()
fig3_1=px.scatter(df2,x=starNameList,y=gravityList)
fig3_1.show()

gravityList2=df3["gravity"].to_list()
fig3_1=px.scatter(df3,x=starNameList2,y=gravityList2)
fig3_1.show()

distanceList=df2["Distance_from_earth"].to_list()
fig4_1=px.scatter(df2,x=starNameList,y=distanceList)
fig4_1.show()

distanceList2=df3["Distance_from_earth"].to_list()
fig4_1=px.scatter(df3,x=starNameList2,y=distanceList2)
fig4_1.show()
 
